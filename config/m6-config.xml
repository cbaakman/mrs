<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE m6-config SYSTEM "http://mrs.cmbi.ru.nl/dtd/m6-config.dtd">
<m6-config>
	
	<databank id="pdbfinder">
		<name>PDBFINDER</name>
<!--		<file>C:\Users\maarten\projects\m6\test\pdbfinder.m6</file> -->
		<file>test/pdbfinder.m6</file>
		<locale>en_US.UTF-8</locale>
		
		<!-- source type can be path, glob or regex -->
		<source type="path">test/PDBFIND2.TXT</source>
<!--		<source type="path">C:\Users\maarten\projects\m6\test\PDBFIND2.TXT</source> -->
<!--		<source type="path">C:\Users\maarten\projects\m6\test\pdbfind2-head-2.txt</source>-->
<!--		<source type="path">C:\Users\maarten\projects\m6\test\pdbfind2-head.txt</source>-->
		
		<!-- parser info -->
		<!-- if no header-line or document-separator element is specified, the
			 entire file is considered to be one document. -->
		
		<!-- header-line's will be stripped off each file. If document-separator
			 below is specified as first-line-matches then this header is of course not needed. -->
		<header-line>^//.*</header-line>

		<!-- document-separator indicates either the start or the end of a document.
			 The content is interpreted based on the type attribute.
			 If type is last-line-equals (default) then a line equal to the content
			 indicates the end of a document.
			 The other types are last-line-matches (content is a regex), first-line-equal
			 and first-line-matches.
		-->
		<document-separator type="last-line-equals">//</document-separator>

		<!--
			There are three types of processing the document for indexing, specified by
			the type attribute.

			'delimited'					needs delimiter
					a : value1
					b : value2
					etc...
					
			'fixed-width'				needs key-width, can have value-width
			  		a   value1
			  		bb  value2
			  		etc...
			  
			'regex'						needs regex with two captures
			  		Used for more 'human-readable' formats like genbank.
			  		
			  		a    bla bla
			  		 b   another string
			  		     of text for field b
			  		c    and the value for c
			  		
			  		regex in this case e.g.: ^\s*(\w+)\s+((?:.+)(?:\n\s{4,}.+)*)
				
		-->
		
<!--		<processing type="regex" regex="^\s*([A-Z]+)\s+((?:.+\n)(?:\s{4,}.+\n)*)" >-->
		<processing type="delimited" delimiter=":">
			<process key="id"							type="string"		action="index attr unique" />
			<process key="header"		name="title"	type="string"		action="index attr" />
			<process key="chain"											action="stop" />
			<process key="resolution"					type="numeric"		action="index" />
			<process key="author"						type="string"		action="index">
				<postprocess what="(\w)\.(?=\w)" with="$1. " flags="global" />
			</process>
			<process key="date"							type="date"			action="index" />
			<process key="r-factor"						type="numeric"		action="index" />
			<process					name="text"		type="text"			action="index" />
		</processing>

	</databank>

	<databank id="genbank">
		<name>Genbank</name>
		<file>test/genbank.m6</file>
		<locale>en_US.UTF-8</locale>
		
		<source type="path">/data/raw/genbank_release/*.seq.gz</source>
		
		<document-separator type="first-line-matches">^LOCUS </document-separator>
		<document-separator type="last-line-equals">//</document-separator>

		<foreach regex="^\s*(\w+)\s+((?:.+)(?:\n\s{5,}.+)*)">
			<switch>
				<case test="$1 eq 'locus'">
					<substring location="13-28">
						<store action="index attr unique" name="id"/>
					</substring>
					<substring location="69-79">
						<store action="index" name="date" type="date" format="dd-MMM-yyyy" />
					</substring>
				</case>
				
				<case test="$1 eq 'definition'">
					<store name="title" action="index attr" />
				</case>

				<case test="$1 eq 'accession'">
					<foreach split="\s+">
						<store name="accession" action="index unique" />
					</foreach>
				</case>
				
				<case test="$1 eq 'version'">
					<match regex="(\S+) GI:(\d+)">
						<capture nr="1">
							<store name="version" action="index unique"/>
						</capture>
						<capture nr="2">
							<store name="gi" action="index unique" />
						</capture>
					</match>
				</case>
				
				<case test="$1 eq 'features'">
					<foreach regex="^\s{5}(\w+)\s+((?:\S.+)(?:\n\s{20,}.+)*)">
						<foreach regex="/(\w+)="((?:\n|[^"]|"")*?)">
							<store name="feature" action="index"/>
						</foreach>
					</foreach>
				</case>
				
				<case test="$1 eq 'origin'">
					<stop />
				</case>
				
				<default>
				</default>
			</switch>
		</foreach>
	</databank>
	
	
</m6-config>
